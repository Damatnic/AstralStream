package com.astralplayer.nextplayer.gesture

import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.astralplayer.nextplayer.data.gesture.*
import com.astralplayer.nextplayer.ui.screens.GestureSettingsScreen
import kotlinx.coroutines.flow.MutableStateFlow
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

/**
 * UI tests for gesture settings screen
 */
@RunWith(AndroidJUnit4::class)
class GestureSettingsUITest {
    
    @get:Rule
    val composeTestRule = createComposeRule()
    
    @Test
    fun testGeneralSettingsSection() {
        val settings = MutableStateFlow(EnhancedGestureSettings())
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Expand general settings
        composeTestRule.onNodeWithText("General Settings")
            .performClick()
        
        // Verify settings are visible
        composeTestRule.onNodeWithText("Enable Gestures")
            .assertExists()
        
        composeTestRule.onNodeWithText("Sensitivity")
            .assertExists()
        
        // Toggle gestures
        composeTestRule.onNodeWithTag("gesture_toggle")
            .performClick()
        
        // Verify toggled
        composeTestRule.waitForIdle()
        assert(!settings.value.general.isEnabled)
    }
    
    @Test
    fun testSeekingSettingsSection() {
        val settings = MutableStateFlow(EnhancedGestureSettings())
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Expand seeking settings
        composeTestRule.onNodeWithText("Seeking Settings")
            .performClick()
        
        // Verify seek duration slider
        composeTestRule.onNodeWithText("Seek Duration")
            .assertExists()
        
        // Modify seek duration
        composeTestRule.onAllNodesWithTag("seek_duration_slider")
            .onFirst()
            .performTouchInput {
                swipeRight()
            }
        
        // Verify value changed
        composeTestRule.waitForIdle()
        assert(settings.value.seeking.seekDuration > 60f)
    }
    
    @Test
    fun testVolumeSettingsSection() {
        val settings = MutableStateFlow(EnhancedGestureSettings())
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Expand volume settings
        composeTestRule.onNodeWithText("Volume Settings")
            .performClick()
        
        // Toggle volume gestures
        composeTestRule.onNodeWithTag("volume_gesture_toggle")
            .performClick()
        
        // Verify disabled
        composeTestRule.waitForIdle()
        assert(!settings.value.volume.isEnabled)
    }
    
    @Test
    fun testDoubleTapSettings() {
        val settings = MutableStateFlow(EnhancedGestureSettings())
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Expand double tap settings
        composeTestRule.onNodeWithText("Double Tap Settings")
            .performClick()
        
        // Verify seek amount options
        composeTestRule.onNodeWithText("10s")
            .assertExists()
        
        composeTestRule.onNodeWithText("30s")
            .assertExists()
        
        // Select different seek amount
        composeTestRule.onNodeWithText("30s")
            .performClick()
        
        // Verify changed
        composeTestRule.waitForIdle()
        assert(settings.value.doubleTap.seekAmount == 30000L)
    }
    
    @Test
    fun testLongPressSettings() {
        val settings = MutableStateFlow(EnhancedGestureSettings())
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Expand long press settings
        composeTestRule.onNodeWithText("Long Press Settings")
            .performClick()
        
        // Verify speed controls
        composeTestRule.onNodeWithText("Speed Interval")
            .assertExists()
        
        // Verify speed progression display
        composeTestRule.onNodeWithText("1x → 2x → 4x", substring = true)
            .assertExists()
    }
    
    @Test
    fun testSettingsValidation() {
        val settings = MutableStateFlow(
            EnhancedGestureSettings(
                general = GeneralGestureSettings(
                    sensitivity = 2.0f // Invalid - too high
                )
            )
        )
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = settings.value,
                onSettingsChange = { settings.value = it },
                onBack = {},
                onImport = { "" },
                onExport = {}
            )
        }
        
        // Should show validation error
        composeTestRule.onNodeWithText("Sensitivity must be between", substring = true)
            .assertExists()
    }
    
    @Test
    fun testImportExportButtons() {
        var importClicked = false
        var exportClicked = false
        
        composeTestRule.setContent {
            GestureSettingsScreen(
                settings = EnhancedGestureSettings(),
                onSettingsChange = {},
                onBack = {},
                onImport = { 
                    importClicked = true
                    ""
                },
                onExport = { exportClicked = true }
            )
        }
        
        // Test import button
        composeTestRule.onNodeWithText("Import")
            .performClick()
        
        assert(importClicked)
        
        // Test export button
        composeTestRule.onNodeWithText("Export")
            .performClick()
        
        assert(exportClicked)
    }
}