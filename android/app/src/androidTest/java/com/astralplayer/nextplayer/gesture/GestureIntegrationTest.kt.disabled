package com.astralplayer.nextplayer.gesture

import android.net.Uri
import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createAndroidComposeRule
import androidx.media3.common.Player
import androidx.test.ext.junit.runners.AndroidJUnit4
import androidx.test.platform.app.InstrumentationRegistry
import com.astralplayer.nextplayer.VideoPlayerActivity
import com.astralplayer.nextplayer.data.*
import com.astralplayer.nextplayer.data.gesture.*
import kotlinx.coroutines.flow.first
import kotlinx.coroutines.runBlocking
import kotlinx.coroutines.test.runTest
import org.junit.Before
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith
import kotlin.test.assertEquals
import kotlin.test.assertTrue

/**
 * Integration tests for gesture system with video player
 */
@RunWith(AndroidJUnit4::class)
class GestureIntegrationTest {
    
    @get:Rule
    val composeTestRule = createAndroidComposeRule<VideoPlayerActivity>()
    
    private lateinit var gestureManager: EnhancedGestureManager
    private lateinit var playerRepository: PlayerRepository
    
    @Before
    fun setup() {
        val context = InstrumentationRegistry.getInstrumentation().targetContext
        gestureManager = EnhancedGestureManager(context)
        
        // Initialize player repository from activity
        composeTestRule.activityRule.scenario.onActivity { activity ->
            playerRepository = activity.playerRepository
        }
    }
    
    @Test
    fun testHorizontalSeekGesture() = runTest {
        // Load test video
        val testUri = Uri.parse("android.resource://com.astralplayer.nextplayer/raw/test_video")
        playerRepository.playVideo(testUri)
        
        // Wait for video to load
        composeTestRule.waitUntil(timeoutMillis = 5000) {
            runBlocking {
                playerRepository.playerState.first().playbackState == Player.STATE_READY
            }
        }
        
        // Get initial position
        val initialPosition = playerRepository.playerState.first().currentPosition
        
        // Perform horizontal swipe gesture
        composeTestRule.onRoot().performTouchInput {
            swipeRight(
                startX = centerX - 100f,
                endX = centerX + 100f,
                durationMillis = 300
            )
        }
        
        // Wait for seek to complete
        composeTestRule.waitForIdle()
        
        // Verify position changed
        val newPosition = playerRepository.playerState.first().currentPosition
        assertTrue(newPosition > initialPosition, "Video should have seeked forward")
    }
    
    @Test
    fun testVolumeGesture() = runTest {
        // Get initial volume
        val initialVolume = playerRepository.playerState.first().volume
        
        // Perform vertical swipe on right side
        composeTestRule.onRoot().performTouchInput {
            val rightSideX = width * 0.75f
            swipeUp(
                startY = centerY + 100f,
                endY = centerY - 100f,
                startX = rightSideX,
                endX = rightSideX,
                durationMillis = 300
            )
        }
        
        // Wait for volume change
        composeTestRule.waitForIdle()
        
        // Verify volume increased
        val newVolume = playerRepository.playerState.first().volume
        assertTrue(newVolume > initialVolume, "Volume should have increased")
    }
    
    @Test
    fun testBrightnessGesture() = runTest {
        // Get initial brightness
        val initialBrightness = playerRepository.playerState.first().brightness
        
        // Perform vertical swipe on left side
        composeTestRule.onRoot().performTouchInput {
            val leftSideX = width * 0.25f
            swipeUp(
                startY = centerY + 100f,
                endY = centerY - 100f,
                startX = leftSideX,
                endX = leftSideX,
                durationMillis = 300
            )
        }
        
        // Wait for brightness change
        composeTestRule.waitForIdle()
        
        // Verify brightness increased
        val newBrightness = playerRepository.playerState.first().brightness
        assertTrue(newBrightness > initialBrightness, "Brightness should have increased")
    }
    
    @Test
    fun testDoubleTapSeek() = runTest {
        // Load test video
        val testUri = Uri.parse("android.resource://com.astralplayer.nextplayer/raw/test_video")
        playerRepository.playVideo(testUri)
        
        // Wait for video to load
        composeTestRule.waitUntil(timeoutMillis = 5000) {
            runBlocking {
                playerRepository.playerState.first().playbackState == Player.STATE_READY
            }
        }
        
        val initialPosition = playerRepository.playerState.first().currentPosition
        
        // Double tap on right side
        composeTestRule.onRoot().performTouchInput {
            val rightSideX = width * 0.75f
            doubleClick(Offset(rightSideX, centerY))
        }
        
        // Wait for seek
        composeTestRule.waitForIdle()
        
        // Verify seeked forward
        val newPosition = playerRepository.playerState.first().currentPosition
        assertEquals(initialPosition + 10000L, newPosition, "Should seek forward 10 seconds")
    }
    
    @Test
    fun testLongPressSeek() = runTest {
        // Load test video
        val testUri = Uri.parse("android.resource://com.astralplayer.nextplayer/raw/test_video")
        playerRepository.playVideo(testUri)
        
        // Wait for video to load
        composeTestRule.waitUntil(timeoutMillis = 5000) {
            runBlocking {
                playerRepository.playerState.first().playbackState == Player.STATE_READY
            }
        }
        
        // Perform long press
        composeTestRule.onRoot().performTouchInput {
            longClick(
                position = Offset(width * 0.75f, centerY),
                durationMillis = 2000 // 2 second long press
            )
        }
        
        // Verify seek overlay was shown
        composeTestRule.onNodeWithTag("long_press_overlay")
            .assertExists()
    }
    
    @Test
    fun testPlayPauseToggle() = runTest {
        // Load test video
        val testUri = Uri.parse("android.resource://com.astralplayer.nextplayer/raw/test_video")
        playerRepository.playVideo(testUri)
        
        // Wait for video to start playing
        composeTestRule.waitUntil(timeoutMillis = 5000) {
            runBlocking {
                playerRepository.playerState.first().isPlaying
            }
        }
        
        // Single tap to pause
        composeTestRule.onRoot().performTouchInput {
            click(Offset(centerX, centerY))
        }
        
        // Wait and verify paused
        composeTestRule.waitForIdle()
        val isPaused = !playerRepository.playerState.first().isPlaying
        assertTrue(isPaused, "Video should be paused")
        
        // Single tap to play
        composeTestRule.onRoot().performTouchInput {
            click(Offset(centerX, centerY))
        }
        
        // Wait and verify playing
        composeTestRule.waitForIdle()
        val isPlaying = playerRepository.playerState.first().isPlaying
        assertTrue(isPlaying, "Video should be playing")
    }
    
    @Test
    fun testGestureConflictResolution() = runTest {
        // Try to perform conflicting gestures
        composeTestRule.onRoot().performTouchInput {
            // Start a horizontal swipe
            down(Offset(centerX - 50f, centerY))
            moveBy(Offset(30f, 0f))
            
            // Then try to make it diagonal (should be resolved as horizontal)
            moveBy(Offset(30f, 30f))
            up()
        }
        
        // Verify only horizontal seek was triggered
        val lastAction = gestureManager.lastGestureAction.first()
        assertTrue(lastAction is GestureAction.Seek, "Should resolve to horizontal seek")
    }
    
    @Test
    fun testGestureSettings() = runTest {
        // Update gesture settings
        val newSettings = EnhancedGestureSettings(
            general = GeneralGestureSettings(sensitivity = 0.5f),
            seeking = SeekingGestureSettings(
                seekSensitivity = 0.3f,
                seekDuration = 30f
            )
        )
        gestureManager.updateSettings(newSettings)
        
        // Verify settings applied
        val currentSettings = gestureManager.enhancedGestureSettings.first()
        assertEquals(0.5f, currentSettings.general.sensitivity)
        assertEquals(0.3f, currentSettings.seeking.seekSensitivity)
    }
}