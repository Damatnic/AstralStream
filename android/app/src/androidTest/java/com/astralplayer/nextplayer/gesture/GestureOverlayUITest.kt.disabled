package com.astralplayer.nextplayer.gesture

import androidx.compose.ui.test.*
import androidx.compose.ui.test.junit4.createComposeRule
import androidx.test.ext.junit.runners.AndroidJUnit4
import com.astralplayer.nextplayer.data.*
import com.astralplayer.nextplayer.data.gesture.*
import com.astralplayer.nextplayer.ui.components.*
import org.junit.Rule
import org.junit.Test
import org.junit.runner.RunWith

/**
 * UI tests for gesture overlay components
 */
@RunWith(AndroidJUnit4::class)
class GestureOverlayUITest {
    
    @get:Rule
    val composeTestRule = createComposeRule()
    
    @Test
    fun testSeekPreviewOverlay() {
        val seekInfo = HorizontalSeekGestureHandler.SeekPreviewInfo(
            seekDelta = 10000L,
            targetPosition = 60000L,
            isForward = true,
            velocity = 1.5f
        )
        
        composeTestRule.setContent {
            SeekPreviewOverlay(
                seekInfo = seekInfo,
                currentPosition = 50000L,
                videoDuration = 300000L,
                thumbnailUrl = null
            )
        }
        
        // Verify seek amount displayed
        composeTestRule.onNodeWithText("+10s")
            .assertExists()
            .assertIsDisplayed()
        
        // Verify target time displayed
        composeTestRule.onNodeWithText("1:00")
            .assertExists()
    }
    
    @Test
    fun testVolumeOverlay() {
        val volumeInfo = VerticalGestureHandler.VolumeInfo(
            currentVolume = 0.7f,
            maxVolume = 1.0f,
            isMuted = false
        )
        
        composeTestRule.setContent {
            VolumeOverlay(
                volumeInfo = volumeInfo,
                visible = true
            )
        }
        
        // Verify volume percentage
        composeTestRule.onNodeWithText("70%")
            .assertExists()
            .assertIsDisplayed()
        
        // Verify volume icon exists
        composeTestRule.onNodeWithContentDescription("Volume")
            .assertExists()
    }
    
    @Test
    fun testBrightnessOverlay() {
        val brightnessInfo = VerticalGestureHandler.BrightnessInfo(
            currentBrightness = 0.5f,
            isAutoBrightness = false
        )
        
        composeTestRule.setContent {
            BrightnessOverlay(
                brightnessInfo = brightnessInfo,
                visible = true
            )
        }
        
        // Verify brightness percentage
        composeTestRule.onNodeWithText("50%")
            .assertExists()
            .assertIsDisplayed()
        
        // Verify brightness icon
        composeTestRule.onNodeWithContentDescription("Brightness")
            .assertExists()
    }
    
    @Test
    fun testLongPressSeekOverlay() {
        val seekInfo = LongPressSeekHandler.LongPressSeekInfo(
            isActive = true,
            currentSpeed = 4f,
            currentSpeedIndex = 2,
            maxSpeedIndex = 5,
            direction = SeekDirection.FORWARD,
            totalSeekAmount = 20000L,
            elapsedTime = 2000L,
            speedProgression = listOf(1f, 2f, 4f, 8f, 16f, 32f)
        )
        
        composeTestRule.setContent {
            LongPressSeekOverlay(
                seekInfo = seekInfo,
                modifier = androidx.compose.ui.Modifier.testTag("long_press_overlay")
            )
        }
        
        // Verify speed indicator
        composeTestRule.onNodeWithText("4x")
            .assertExists()
            .assertIsDisplayed()
        
        // Verify seek amount
        composeTestRule.onNodeWithText("+20s")
            .assertExists()
        
        // Verify progress indicators
        composeTestRule.onAllNodesWithTag("speed_indicator")
            .assertCountEquals(6) // All speed levels
    }
    
    @Test
    fun testDoubleTapSeekIndicator() {
        composeTestRule.setContent {
            DoubleTapSeekIndicator(
                side = TouchSide.RIGHT,
                seekAmount = 10000L,
                visible = true
            )
        }
        
        // Verify seek amount
        composeTestRule.onNodeWithText("10")
            .assertExists()
            .assertIsDisplayed()
        
        // Verify forward icon for right side
        composeTestRule.onNodeWithContentDescription("Forward")
            .assertExists()
    }
    
    @Test
    fun testGestureConflictIndicator() {
        val conflicts = listOf(
            GestureType.HORIZONTAL_SEEK,
            GestureType.VERTICAL_VOLUME
        )
        
        composeTestRule.setContent {
            GestureConflictIndicator(
                conflictingGestures = conflicts,
                visible = true
            )
        }
        
        // Verify conflict message
        composeTestRule.onNodeWithText("Gesture conflict detected", substring = true)
            .assertExists()
            .assertIsDisplayed()
    }
    
    @Test
    fun testPinchZoomOverlay() {
        composeTestRule.setContent {
            PinchZoomOverlay(
                zoomLevel = 1.5f,
                visible = true
            )
        }
        
        // Verify zoom level
        composeTestRule.onNodeWithText("150%")
            .assertExists()
            .assertIsDisplayed()
    }
    
    @Test
    fun testOverlayAnimations() {
        var visible = true
        
        composeTestRule.setContent {
            VolumeOverlay(
                volumeInfo = VerticalGestureHandler.VolumeInfo(
                    currentVolume = 0.5f,
                    maxVolume = 1.0f,
                    isMuted = false
                ),
                visible = visible
            )
        }
        
        // Verify initially visible
        composeTestRule.onNodeWithText("50%")
            .assertExists()
            .assertIsDisplayed()
        
        // Hide overlay
        visible = false
        composeTestRule.recompose()
        
        // Wait for fade out animation
        composeTestRule.waitUntil(timeoutMillis = 1000) {
            composeTestRule.onNodeWithText("50%")
                .fetchSemanticsNode().let { node ->
                    !node.layoutInfo.isPlaced
                }
        }
    }
}