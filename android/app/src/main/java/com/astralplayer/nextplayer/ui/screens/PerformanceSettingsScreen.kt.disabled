package com.astralplayer.nextplayer.ui.screens

import androidx.compose.animation.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.astralplayer.nextplayer.data.repository.SettingsRepository
import com.astralplayer.nextplayer.ui.components.*
import com.astralplayer.nextplayer.utils.*
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch

/**
 * Performance Settings Screen
 * Configure performance optimization and caching
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun PerformanceSettingsScreen(
    navController: NavController,
    settingsRepository: SettingsRepository,
    performanceOptimizer: PerformanceOptimizer
) {
    val scope = rememberCoroutineScope()
    val context = LocalContext.current
    
    // Performance metrics
    val performanceMetrics by performanceOptimizer.performanceMetrics.collectAsState()
    val optimizationSettings by performanceOptimizer.optimizationSettings.collectAsState()
    
    // Cache stats
    var cacheStats by remember { mutableStateOf(performanceOptimizer.getCacheStats()) }
    
    // UI state
    var showClearCacheDialog by remember { mutableStateOf(false) }
    var clearingCache by remember { mutableStateOf(false) }
    
    // Update cache stats periodically
    LaunchedEffect(Unit) {
        while (true) {
            cacheStats = performanceOptimizer.getCacheStats()
            delay(5000) // Update every 5 seconds
        }
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Performance & Storage",
                        style = MaterialTheme.typography.titleLarge
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Performance Overview
            item {
                PerformanceOverviewCard(performanceMetrics)
            }
            
            // Quality Presets
            item {
                Text(
                    text = "Video Quality",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
            
            item {
                QualityPresetsCard(
                    currentPreset = optimizationSettings.qualityPreset,
                    onPresetSelected = { preset ->
                        performanceOptimizer.updateOptimizationSettings(
                            optimizationSettings.copy(qualityPreset = preset)
                        )
                    }
                )
            }
            
            // Optimization Options
            item {
                Text(
                    text = "Optimization",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
            
            item {
                OptimizationOptionsCard(
                    settings = optimizationSettings,
                    onSettingsChanged = { newSettings ->
                        performanceOptimizer.updateOptimizationSettings(newSettings)
                    }
                )
            }
            
            // Cache Management
            item {
                Text(
                    text = "Storage & Cache",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
            
            item {
                CacheManagementCard(
                    cacheStats = cacheStats,
                    onClearCache = { showClearCacheDialog = true }
                )
            }
            
            // Advanced Settings
            item {
                Text(
                    text = "Advanced",
                    style = MaterialTheme.typography.titleMedium,
                    fontWeight = FontWeight.Bold,
                    modifier = Modifier.padding(vertical = 8.dp)
                )
            }
            
            item {
                AdvancedPerformanceCard(
                    settings = optimizationSettings,
                    onSettingsChanged = { newSettings ->
                        performanceOptimizer.updateOptimizationSettings(newSettings)
                    }
                )
            }
            
            // Device Info
            item {
                Spacer(modifier = Modifier.height(16.dp))
            }
            
            item {
                DeviceInfoCard()
            }
        }
    }
    
    // Clear Cache Dialog
    if (showClearCacheDialog) {
        AlertDialog(
            onDismissRequest = { showClearCacheDialog = false },
            title = { Text("Clear Cache") },
            text = {
                Text("This will clear all cached videos and thumbnails. Are you sure you want to continue?")
            },
            confirmButton = {
                TextButton(
                    onClick = {
                        scope.launch {
                            clearingCache = true
                            showClearCacheDialog = false
                            performanceOptimizer.clearAllCaches()
                            clearingCache = false
                        }
                    }
                ) {
                    Text("Clear")
                }
            },
            dismissButton = {
                TextButton(onClick = { showClearCacheDialog = false }) {
                    Text("Cancel")
                }
            }
        )
    }
    
    // Clearing cache indicator
    if (clearingCache) {
        Box(
            modifier = Modifier.fillMaxSize(),
            contentAlignment = Alignment.Center
        ) {
            BubbleCard(
                elevation = 8,
                cornerRadius = 24
            ) {
                Row(
                    modifier = Modifier.padding(24.dp),
                    horizontalArrangement = Arrangement.spacedBy(16.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    CircularProgressIndicator()
                    Text("Clearing cache...")
                }
            }
        }
    }
}

@Composable
private fun PerformanceOverviewCard(metrics: PerformanceMetrics) {
    BubbleCard(
        elevation = 4,
        cornerRadius = 24,
        containerColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
    ) {
        Column(
            modifier = Modifier.padding(20.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            Text(
                text = "Performance Overview",
                style = MaterialTheme.typography.titleMedium,
                fontWeight = FontWeight.Bold
            )
            
            // Memory Usage
            PerformanceMetricRow(
                icon = Icons.Default.Memory,
                label = "Memory Usage",
                value = "${metrics.memoryUsage}%",
                progress = metrics.memoryUsage / 100f,
                progressColor = when {
                    metrics.memoryUsage > 80 -> MaterialTheme.colorScheme.error
                    metrics.memoryUsage > 60 -> MaterialTheme.colorScheme.tertiary
                    else -> MaterialTheme.colorScheme.primary
                }
            )
            
            // Cache Size
            PerformanceMetricRow(
                icon = Icons.Default.Storage,
                label = "Cache Size",
                value = formatFileSize(metrics.cacheSize),
                progress = (metrics.cacheSize.toFloat() / (500 * 1024 * 1024)), // 500MB max
                progressColor = MaterialTheme.colorScheme.secondary
            )
            
            // Available Storage
            PerformanceMetricRow(
                icon = Icons.Default.SdCard,
                label = "Available Storage",
                value = formatFileSize(metrics.availableStorage),
                showProgress = false
            )
        }
    }
}

@Composable
private fun PerformanceMetricRow(
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    label: String,
    value: String,
    progress: Float? = null,
    progressColor: Color = MaterialTheme.colorScheme.primary,
    showProgress: Boolean = true
) {
    Column(
        verticalArrangement = Arrangement.spacedBy(8.dp)
    ) {
        Row(
            modifier = Modifier.fillMaxWidth(),
            horizontalArrangement = Arrangement.SpaceBetween,
            verticalAlignment = Alignment.CenterVertically
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    icon,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.size(20.dp)
                )
                Text(
                    text = label,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            
            Text(
                text = value,
                style = MaterialTheme.typography.bodyLarge,
                fontWeight = FontWeight.Medium
            )
        }
        
        if (showProgress && progress != null) {
            LinearProgressIndicator(
                progress = { progress.coerceIn(0f, 1f) },
                modifier = Modifier
                    .fillMaxWidth()
                    .height(4.dp)
                    .clip(RoundedCornerShape(2.dp)),
                color = progressColor,
                trackColor = MaterialTheme.colorScheme.surfaceVariant
            )
        }
    }
}

@Composable
private fun QualityPresetsCard(
    currentPreset: QualityPreset,
    onPresetSelected: (QualityPreset) -> Unit
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "Choose quality preset based on your needs",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.spacedBy(8.dp)
            ) {
                QualityPreset.values().forEach { preset ->
                    QualityPresetChip(
                        preset = preset,
                        isSelected = currentPreset == preset,
                        onClick = { onPresetSelected(preset) },
                        modifier = Modifier.weight(1f)
                    )
                }
            }
        }
    }
}

@Composable
private fun QualityPresetChip(
    preset: QualityPreset,
    isSelected: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    val (label, icon, description) = when (preset) {
        QualityPreset.LOW -> Triple("Low", Icons.Default.BatteryFull, "Save battery")
        QualityPreset.MEDIUM -> Triple("Medium", Icons.Default.Balance, "Balanced")
        QualityPreset.HIGH -> Triple("High", Icons.Default.HighQuality, "Best quality")
        QualityPreset.AUTO -> Triple("Auto", Icons.Default.AutoAwesome, "Adaptive")
    }
    
    BubbleCard(
        onClick = onClick,
        elevation = if (isSelected) 4 else 1,
        cornerRadius = 16,
        containerColor = if (isSelected) {
            MaterialTheme.colorScheme.primaryContainer
        } else {
            MaterialTheme.colorScheme.surfaceVariant
        },
        modifier = modifier
    ) {
        Column(
            modifier = Modifier
                .fillMaxWidth()
                .padding(12.dp),
            horizontalAlignment = Alignment.CenterHorizontally,
            verticalArrangement = Arrangement.spacedBy(4.dp)
        ) {
            Icon(
                icon,
                contentDescription = null,
                tint = if (isSelected) {
                    MaterialTheme.colorScheme.onPrimaryContainer
                } else {
                    MaterialTheme.colorScheme.onSurfaceVariant
                },
                modifier = Modifier.size(24.dp)
            )
            
            Text(
                text = label,
                style = MaterialTheme.typography.labelLarge,
                fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Medium,
                color = if (isSelected) {
                    MaterialTheme.colorScheme.onPrimaryContainer
                } else {
                    MaterialTheme.colorScheme.onSurfaceVariant
                }
            )
            
            Text(
                text = description,
                style = MaterialTheme.typography.labelSmall,
                color = if (isSelected) {
                    MaterialTheme.colorScheme.onPrimaryContainer.copy(alpha = 0.7f)
                } else {
                    MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.7f)
                },
                textAlign = TextAlign.Center
            )
        }
    }
}

@Composable
private fun OptimizationOptionsCard(
    settings: OptimizationSettings,
    onSettingsChanged: (OptimizationSettings) -> Unit
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            OptimizationToggle(
                label = "Battery Optimization",
                description = "Reduce quality to save battery",
                icon = Icons.Default.BatteryChargingFull,
                checked = settings.batteryOptimization,
                onCheckedChange = { enabled ->
                    onSettingsChanged(settings.copy(batteryOptimization = enabled))
                }
            )
            
            Divider(color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.1f))
            
            OptimizationToggle(
                label = "Data Saver",
                description = "Limit streaming quality to save data",
                icon = Icons.Default.DataSaverOn,
                checked = settings.dataSaverMode,
                onCheckedChange = { enabled ->
                    onSettingsChanged(settings.copy(dataSaverMode = enabled))
                }
            )
            
            Divider(color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.1f))
            
            OptimizationToggle(
                label = "Auto Clear Cache",
                description = "Clear cache when storage is low",
                icon = Icons.Default.AutoDelete,
                checked = settings.clearCacheOnLowStorage,
                onCheckedChange = { enabled ->
                    onSettingsChanged(settings.copy(clearCacheOnLowStorage = enabled))
                }
            )
        }
    }
}

@Composable
private fun OptimizationToggle(
    label: String,
    description: String,
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    checked: Boolean,
    onCheckedChange: (Boolean) -> Unit
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(
            modifier = Modifier.weight(1f),
            horizontalArrangement = Arrangement.spacedBy(12.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            
            Column {
                Text(
                    text = label,
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
        
        Switch(
            checked = checked,
            onCheckedChange = onCheckedChange
        )
    }
}

@Composable
private fun CacheManagementCard(
    cacheStats: CacheStats,
    onClearCache: () -> Unit
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Cache breakdown
            CacheStatRow(
                label = "Video Cache",
                value = formatFileSize(cacheStats.videoCacheSize),
                icon = Icons.Default.VideoLibrary
            )
            
            CacheStatRow(
                label = "Thumbnails",
                value = "${cacheStats.thumbnailCacheCount} cached",
                icon = Icons.Default.Image
            )
            
            CacheStatRow(
                label = "Metadata",
                value = "${cacheStats.metadataCacheCount} videos",
                icon = Icons.Default.Info
            )
            
            Divider(color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.1f))
            
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column {
                    Text(
                        text = "Total Cache Size",
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Bold
                    )
                    Text(
                        text = formatFileSize(cacheStats.totalCacheSize),
                        style = MaterialTheme.typography.titleMedium,
                        color = MaterialTheme.colorScheme.primary
                    )
                }
                
                BubbleButton(
                    onClick = onClearCache,
                    text = "Clear Cache",
                    icon = Icons.Default.DeleteSweep,
                    containerColor = MaterialTheme.colorScheme.errorContainer,
                    contentColor = MaterialTheme.colorScheme.onErrorContainer
                )
            }
        }
    }
}

@Composable
private fun CacheStatRow(
    label: String,
    value: String,
    icon: androidx.compose.ui.graphics.vector.ImageVector
) {
    Row(
        modifier = Modifier.fillMaxWidth(),
        horizontalArrangement = Arrangement.SpaceBetween,
        verticalAlignment = Alignment.CenterVertically
    ) {
        Row(
            horizontalArrangement = Arrangement.spacedBy(8.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.onSurfaceVariant,
                modifier = Modifier.size(20.dp)
            )
            Text(
                text = label,
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
        
        Text(
            text = value,
            style = MaterialTheme.typography.bodyMedium,
            fontWeight = FontWeight.Medium
        )
    }
}

@Composable
private fun AdvancedPerformanceCard(
    settings: OptimizationSettings,
    onSettingsChanged: (OptimizationSettings) -> Unit
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Hardware Acceleration
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween,
                verticalAlignment = Alignment.CenterVertically
            ) {
                Column(modifier = Modifier.weight(1f)) {
                    Text(
                        text = "Hardware Acceleration",
                        style = MaterialTheme.typography.bodyLarge,
                        fontWeight = FontWeight.Medium
                    )
                    Text(
                        text = "Use GPU for video decoding",
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                }
                
                Switch(
                    checked = settings.enableHardwareAcceleration,
                    onCheckedChange = { enabled ->
                        onSettingsChanged(settings.copy(enableHardwareAcceleration = enabled))
                    }
                )
            }
            
            Divider(color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.1f))
            
            // Max Stream Quality
            Column {
                Text(
                    text = "Maximum Stream Quality",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium
                )
                
                Spacer(modifier = Modifier.height(8.dp))
                
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(4.dp)
                ) {
                    val qualities = listOf("auto", "480p", "720p", "1080p", "4K")
                    qualities.forEach { quality ->
                        FilterChip(
                            selected = settings.maxStreamQuality == quality,
                            onClick = {
                                onSettingsChanged(settings.copy(maxStreamQuality = quality))
                            },
                            label = { Text(quality) },
                            modifier = Modifier.weight(1f)
                        )
                    }
                }
            }
            
            Divider(color = MaterialTheme.colorScheme.onSurfaceVariant.copy(alpha = 0.1f))
            
            // Prefetch Duration
            Column {
                Text(
                    text = "Prefetch Duration",
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = "${settings.prefetchDuration} seconds",
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
                
                Slider(
                    value = settings.prefetchDuration.toFloat(),
                    onValueChange = { value ->
                        onSettingsChanged(settings.copy(prefetchDuration = value.toInt()))
                    },
                    valueRange = 0f..120f,
                    steps = 11,
                    modifier = Modifier.fillMaxWidth()
                )
            }
        }
    }
}

@Composable
private fun DeviceInfoCard() {
    val runtime = Runtime.getRuntime()
    val cpuCores = runtime.availableProcessors()
    val maxMemory = runtime.maxMemory()
    
    BubbleCard(
        elevation = 1,
        cornerRadius = 20,
        containerColor = MaterialTheme.colorScheme.surfaceVariant.copy(alpha = 0.5f)
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(8.dp)
        ) {
            Row(
                horizontalArrangement = Arrangement.spacedBy(8.dp),
                verticalAlignment = Alignment.CenterVertically
            ) {
                Icon(
                    Icons.Default.PhoneAndroid,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.primary,
                    modifier = Modifier.size(20.dp)
                )
                Text(
                    text = "Device Information",
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Medium
                )
            }
            
            Text(
                text = "CPU Cores: $cpuCores",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Max Memory: ${formatFileSize(maxMemory)}",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            Text(
                text = "Android ${android.os.Build.VERSION.RELEASE} (API ${android.os.Build.VERSION.SDK_INT})",
                style = MaterialTheme.typography.bodySmall,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
        }
    }
}

// Helper function
private fun formatFileSize(bytes: Long): String {
    return when {
        bytes >= 1_000_000_000 -> "%.1f GB".format(bytes / 1_000_000_000.0)
        bytes >= 1_000_000 -> "%.1f MB".format(bytes / 1_000_000.0)
        bytes >= 1_000 -> "%.1f KB".format(bytes / 1_000.0)
        else -> "$bytes B"
    }
}