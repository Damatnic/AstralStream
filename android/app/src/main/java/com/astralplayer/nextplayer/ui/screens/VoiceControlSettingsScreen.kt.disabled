package com.astralplayer.nextplayer.ui.screens

import androidx.compose.animation.*
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.*
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.unit.dp
import androidx.navigation.NavController
import com.astralplayer.nextplayer.data.repository.SettingsRepository
import com.astralplayer.nextplayer.feature.voice.VoiceCommand
import com.astralplayer.nextplayer.ui.components.*
import kotlinx.coroutines.launch

/**
 * Voice Control Settings Screen
 * Configure voice commands and preferences
 */
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun VoiceControlSettingsScreen(
    navController: NavController,
    settingsRepository: SettingsRepository
) {
    val scope = rememberCoroutineScope()
    
    // Voice settings state
    var voiceEnabled by remember { mutableStateOf(true) }
    var voiceFeedback by remember { mutableStateOf(true) }
    var wakeWord by remember { mutableStateOf("Hey Astral") }
    var language by remember { mutableStateOf("English") }
    var continuousListening by remember { mutableStateOf(false) }
    var confirmActions by remember { mutableStateOf(true) }
    var customCommands by remember { mutableStateOf<Map<String, VoiceCommand>>(emptyMap()) }
    
    // Load settings
    LaunchedEffect(Unit) {
        // Load from settings repository
    }
    
    Scaffold(
        topBar = {
            TopAppBar(
                title = { 
                    Text(
                        "Voice Control Settings",
                        style = MaterialTheme.typography.titleLarge
                    )
                },
                navigationIcon = {
                    IconButton(onClick = { navController.navigateUp() }) {
                        Icon(Icons.Default.ArrowBack, contentDescription = "Back")
                    }
                },
                colors = TopAppBarDefaults.topAppBarColors(
                    containerColor = MaterialTheme.colorScheme.surface
                )
            )
        }
    ) { paddingValues ->
        LazyColumn(
            modifier = Modifier
                .fillMaxSize()
                .padding(paddingValues),
            contentPadding = PaddingValues(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // Voice Control Toggle
            item {
                BubbleCard(
                    elevation = 4,
                    cornerRadius = 24,
                    containerColor = if (voiceEnabled) {
                        MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                    } else {
                        MaterialTheme.colorScheme.surfaceVariant
                    }
                ) {
                    Row(
                        modifier = Modifier
                            .fillMaxWidth()
                            .padding(20.dp),
                        horizontalArrangement = Arrangement.SpaceBetween,
                        verticalAlignment = Alignment.CenterVertically
                    ) {
                        Column(modifier = Modifier.weight(1f)) {
                            Row(
                                horizontalArrangement = Arrangement.spacedBy(8.dp),
                                verticalAlignment = Alignment.CenterVertically
                            ) {
                                Icon(
                                    Icons.Default.Mic,
                                    contentDescription = null,
                                    tint = if (voiceEnabled) {
                                        MaterialTheme.colorScheme.primary
                                    } else {
                                        MaterialTheme.colorScheme.onSurfaceVariant
                                    }
                                )
                                Text(
                                    text = "Voice Control",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Bold
                                )
                            }
                            Text(
                                text = "Control playback with voice commands",
                                style = MaterialTheme.typography.bodyMedium,
                                color = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                        
                        Switch(
                            checked = voiceEnabled,
                            onCheckedChange = { 
                                voiceEnabled = it
                                scope.launch {
                                    // Save to settings
                                }
                            }
                        )
                    }
                }
            }
            
            // Main Settings
            if (voiceEnabled) {
                item {
                    Text(
                        text = "General",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Voice Feedback",
                        description = "Speak responses to voice commands",
                        icon = Icons.Default.VolumeUp,
                        trailing = {
                            Switch(
                                checked = voiceFeedback,
                                onCheckedChange = { voiceFeedback = it }
                            )
                        }
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Wake Word",
                        description = wakeWord,
                        icon = Icons.Default.RecordVoiceOver,
                        onClick = {
                            // Show wake word dialog
                        }
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Language",
                        description = language,
                        icon = Icons.Default.Language,
                        onClick = {
                            // Show language picker
                        }
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Continuous Listening",
                        description = "Keep listening for commands after first one",
                        icon = Icons.Default.Loop,
                        trailing = {
                            Switch(
                                checked = continuousListening,
                                onCheckedChange = { continuousListening = it }
                            )
                        }
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Confirm Actions",
                        description = "Ask for confirmation before destructive actions",
                        icon = Icons.Default.Security,
                        trailing = {
                            Switch(
                                checked = confirmActions,
                                onCheckedChange = { confirmActions = it }
                            )
                        }
                    )
                }
                
                // Command Customization
                item {
                    Text(
                        text = "Command Shortcuts",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
                
                item {
                    CommandShortcutsCard()
                }
                
                // Quick Phrases
                item {
                    Text(
                        text = "Quick Phrases",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
                
                val quickPhrases = listOf(
                    QuickPhrase("Movie time", listOf("Fullscreen", "Volume up", "Hide UI")),
                    QuickPhrase("Bedtime", listOf("Volume down", "Sleep timer 30 minutes")),
                    QuickPhrase("Study mode", listOf("Speed 1.5", "Show subtitles"))
                )
                
                items(quickPhrases) { phrase ->
                    QuickPhraseCard(
                        phrase = phrase,
                        onEdit = {
                            // Edit phrase
                        }
                    )
                }
                
                item {
                    BubbleButton(
                        onClick = {
                            // Add new phrase
                        },
                        text = "Add Quick Phrase",
                        icon = Icons.Default.Add,
                        modifier = Modifier.fillMaxWidth()
                    )
                }
                
                // Privacy & Permissions
                item {
                    Text(
                        text = "Privacy & Permissions",
                        style = MaterialTheme.typography.titleMedium,
                        fontWeight = FontWeight.Bold,
                        modifier = Modifier.padding(vertical = 8.dp)
                    )
                }
                
                item {
                    InfoCard(
                        icon = Icons.Default.PrivacyTip,
                        title = "Voice Data",
                        description = "Voice commands are processed locally on your device. No audio is sent to external servers.",
                        backgroundColor = MaterialTheme.colorScheme.primaryContainer.copy(alpha = 0.3f)
                    )
                }
                
                item {
                    SettingsCard(
                        title = "Microphone Permission",
                        description = "Required for voice commands",
                        icon = Icons.Default.MicNone,
                        trailing = {
                            Text(
                                text = "Granted",
                                style = MaterialTheme.typography.labelMedium,
                                color = Color(0xFF4CAF50)
                            )
                        },
                        onClick = {
                            // Open app settings
                        }
                    )
                }
                
                // Help & Tutorial
                item {
                    Spacer(modifier = Modifier.height(16.dp))
                }
                
                item {
                    BubbleCard(
                        elevation = 2,
                        cornerRadius = 20,
                        onClick = {
                            // Show voice command tutorial
                        }
                    ) {
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(16.dp),
                            horizontalArrangement = Arrangement.spacedBy(16.dp),
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Box(
                                modifier = Modifier
                                    .size(48.dp)
                                    .clip(RoundedCornerShape(12.dp))
                                    .background(
                                        Brush.linearGradient(
                                            colors = listOf(
                                                MaterialTheme.colorScheme.primary,
                                                MaterialTheme.colorScheme.secondary
                                            )
                                        )
                                    ),
                                contentAlignment = Alignment.Center
                            ) {
                                Icon(
                                    Icons.Default.School,
                                    contentDescription = null,
                                    tint = Color.White,
                                    modifier = Modifier.size(24.dp)
                                )
                            }
                            
                            Column(modifier = Modifier.weight(1f)) {
                                Text(
                                    text = "Voice Command Tutorial",
                                    style = MaterialTheme.typography.titleMedium,
                                    fontWeight = FontWeight.Medium
                                )
                                Text(
                                    text = "Learn how to use voice commands",
                                    style = MaterialTheme.typography.bodySmall,
                                    color = MaterialTheme.colorScheme.onSurfaceVariant
                                )
                            }
                            
                            Icon(
                                Icons.Default.ArrowForward,
                                contentDescription = null,
                                tint = MaterialTheme.colorScheme.onSurfaceVariant
                            )
                        }
                    }
                }
            }
        }
    }
}

@Composable
private fun SettingsCard(
    title: String,
    description: String,
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    trailing: @Composable (() -> Unit)? = null,
    onClick: (() -> Unit)? = null
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20,
        onClick = onClick ?: {}
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.CenterVertically
        ) {
            Icon(
                icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            
            Column(modifier = Modifier.weight(1f)) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.bodyLarge,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
            
            if (trailing != null) {
                trailing()
            } else if (onClick != null) {
                Icon(
                    Icons.Default.ChevronRight,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

@Composable
private fun CommandShortcutsCard() {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Column(
            modifier = Modifier.padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Text(
                text = "Create custom shortcuts for complex commands",
                style = MaterialTheme.typography.bodyMedium,
                color = MaterialTheme.colorScheme.onSurfaceVariant
            )
            
            // Example shortcuts
            val shortcuts = listOf(
                "Next episode" to "Next video",
                "Skip intro" to "Forward 90 seconds",
                "Watch later" to "Add to Watch Later playlist"
            )
            
            shortcuts.forEach { (shortcut, command) ->
                Row(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(8.dp),
                    verticalAlignment = Alignment.CenterVertically
                ) {
                    Text(
                        text = "\"$shortcut\"",
                        style = MaterialTheme.typography.bodyMedium,
                        fontWeight = FontWeight.Medium,
                        modifier = Modifier.weight(1f)
                    )
                    
                    Icon(
                        Icons.Default.ArrowForward,
                        contentDescription = null,
                        modifier = Modifier.size(16.dp),
                        tint = MaterialTheme.colorScheme.onSurfaceVariant
                    )
                    
                    Text(
                        text = command,
                        style = MaterialTheme.typography.bodySmall,
                        color = MaterialTheme.colorScheme.onSurfaceVariant,
                        modifier = Modifier.weight(1f)
                    )
                }
            }
            
            Spacer(modifier = Modifier.height(8.dp))
            
            OutlinedButton(
                onClick = { /* Manage shortcuts */ },
                modifier = Modifier.fillMaxWidth()
            ) {
                Icon(
                    Icons.Default.Edit,
                    contentDescription = null,
                    modifier = Modifier.size(16.dp)
                )
                Spacer(modifier = Modifier.width(8.dp))
                Text("Manage Shortcuts")
            }
        }
    }
}

@Composable
private fun QuickPhraseCard(
    phrase: QuickPhrase,
    onEdit: () -> Unit
) {
    BubbleCard(
        elevation = 2,
        cornerRadius = 20
    ) {
        Row(
            modifier = Modifier
                .fillMaxWidth()
                .padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(16.dp),
            verticalAlignment = Alignment.Top
        ) {
            Box(
                modifier = Modifier
                    .size(40.dp)
                    .clip(RoundedCornerShape(12.dp))
                    .background(MaterialTheme.colorScheme.secondaryContainer),
                contentAlignment = Alignment.Center
            ) {
                Icon(
                    Icons.Default.AutoAwesome,
                    contentDescription = null,
                    tint = MaterialTheme.colorScheme.onSecondaryContainer,
                    modifier = Modifier.size(20.dp)
                )
            }
            
            Column(
                modifier = Modifier.weight(1f),
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = phrase.name,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Medium
                )
                
                phrase.commands.forEach { command ->
                    Row(
                        horizontalArrangement = Arrangement.spacedBy(4.dp)
                    ) {
                        Text(
                            text = "•",
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                        Text(
                            text = command,
                            style = MaterialTheme.typography.bodySmall,
                            color = MaterialTheme.colorScheme.onSurfaceVariant
                        )
                    }
                }
            }
            
            IconButton(onClick = onEdit) {
                Icon(
                    Icons.Default.Edit,
                    contentDescription = "Edit",
                    tint = MaterialTheme.colorScheme.onSurfaceVariant,
                    modifier = Modifier.size(20.dp)
                )
            }
        }
    }
}

@Composable
private fun InfoCard(
    icon: androidx.compose.ui.graphics.vector.ImageVector,
    title: String,
    description: String,
    backgroundColor: Color
) {
    BubbleCard(
        elevation = 1,
        cornerRadius = 20,
        containerColor = backgroundColor
    ) {
        Row(
            modifier = Modifier.padding(16.dp),
            horizontalArrangement = Arrangement.spacedBy(12.dp)
        ) {
            Icon(
                icon,
                contentDescription = null,
                tint = MaterialTheme.colorScheme.primary,
                modifier = Modifier.size(24.dp)
            )
            
            Column(
                verticalArrangement = Arrangement.spacedBy(4.dp)
            ) {
                Text(
                    text = title,
                    style = MaterialTheme.typography.titleSmall,
                    fontWeight = FontWeight.Medium
                )
                Text(
                    text = description,
                    style = MaterialTheme.typography.bodySmall,
                    color = MaterialTheme.colorScheme.onSurfaceVariant
                )
            }
        }
    }
}

// Data classes

private data class QuickPhrase(
    val name: String,
    val commands: List<String>
)