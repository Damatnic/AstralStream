package com.astralplayer.nextplayer.data

import android.net.Uri
import androidx.media3.common.MediaItem
import androidx.media3.common.PlaybackException
import androidx.media3.common.Player
import androidx.media3.exoplayer.ExoPlayer
import com.astralplayer.nextplayer.BaseUnitTest
import kotlinx.coroutines.flow.first
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.mockito.Mock
import org.mockito.Mockito.*

class PlayerRepositoryTest : BaseUnitTest() {
    
    @Mock
    private lateinit var mockExoPlayer: ExoPlayer
    
    private lateinit var repository: PlayerRepositoryImpl
    
    @Before
    override fun setUp() {
        super.setUp()
        repository = PlayerRepositoryImpl(mockExoPlayer)
    }
    
    @Test
    fun `initial player state is correct`() = runTest {
        // When
        val initialState = repository.playerState.first()
        
        // Then
        assertFalse(initialState.isPlaying)
        assertEquals(0L, initialState.currentPosition)
        assertEquals(0L, initialState.duration)
        assertEquals(0, initialState.bufferedPercentage)
        assertEquals(1.0f, initialState.playbackSpeed)
        assertEquals(1.0f, initialState.volume)
        assertFalse(initialState.isLoading)
        assertNull(initialState.error)
        assertNull(initialState.currentMediaItem)
    }
    
    @Test
    fun `playVideo creates and sets media item`() = runTest {
        // Given
        val uri = Uri.parse("content://test.mp4")
        val title = "Test Video"
        
        // When
        val result = repository.playVideo(uri, title)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).setMediaItem(any(MediaItem::class.java))
        verify(mockExoPlayer).prepare()
        verify(mockExoPlayer).play()
    }
    
    @Test
    fun `pauseVideo calls exoplayer pause`() = runTest {
        // When
        val result = repository.pauseVideo()
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).pause()
    }
    
    @Test
    fun `resumeVideo calls exoplayer play`() = runTest {
        // When
        val result = repository.resumeVideo()
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).play()
    }
    
    @Test
    fun `togglePlayPause calls pause when playing`() = runTest {
        // Given
        `when`(mockExoPlayer.isPlaying).thenReturn(true)
        
        // When
        val result = repository.togglePlayPause()
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).pause()
    }
    
    @Test
    fun `togglePlayPause calls play when not playing`() = runTest {
        // Given
        `when`(mockExoPlayer.isPlaying).thenReturn(false)
        
        // When
        val result = repository.togglePlayPause()
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).play()
    }
    
    @Test
    fun `seekTo calls exoplayer seekTo`() = runTest {
        // Given
        val position = 30000L
        
        // When
        val result = repository.seekTo(position)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).seekTo(position)
    }
    
    @Test
    fun `seekBy calls exoplayer seekTo with calculated position`() = runTest {
        // Given
        val currentPosition = 30000L
        val deltaMs = 10000L
        `when`(mockExoPlayer.currentPosition).thenReturn(currentPosition)
        
        // When
        val result = repository.seekBy(deltaMs)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).seekTo(currentPosition + deltaMs)
    }
    
    @Test
    fun `setPlaybackSpeed calls exoplayer setPlaybackSpeed`() = runTest {
        // Given
        val speed = 1.5f
        
        // When
        val result = repository.setPlaybackSpeed(speed)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).setPlaybackSpeed(speed)
    }
    
    @Test
    fun `setVolume calls exoplayer setVolume`() = runTest {
        // Given
        val volume = 0.8f
        
        // When
        val result = repository.setVolume(volume)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).setVolume(volume)
    }
    
    @Test
    fun `adjustVolume calls exoplayer setVolume with adjusted value`() = runTest {
        // Given
        val currentVolume = 0.5f
        val delta = 0.2f
        `when`(mockExoPlayer.volume).thenReturn(currentVolume)
        
        // When
        val result = repository.adjustVolume(delta)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).setVolume(0.7f) // 0.5 + 0.2
    }
    
    @Test
    fun `adjustVolume clamps volume to valid range`() = runTest {
        // Given - volume would exceed 1.0
        val currentVolume = 0.9f
        val delta = 0.5f
        `when`(mockExoPlayer.volume).thenReturn(currentVolume)
        
        // When
        val result = repository.adjustVolume(delta)
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).setVolume(1.0f) // Clamped to max
    }
    
    @Test
    fun `stopVideo calls exoplayer stop`() = runTest {
        // When
        val result = repository.stopVideo()
        
        // Then
        assertTrue(result.isSuccess)
        verify(mockExoPlayer).stop()
    }
    
    @Test
    fun `release calls exoplayer release and removes listener`() {
        // When
        repository.release()
        
        // Then
        verify(mockExoPlayer).removeListener(any())
        verify(mockExoPlayer).release()
    }
}