package com.astralplayer.nextplayer.data.gesture

import androidx.compose.ui.geometry.Offset
import androidx.compose.ui.unit.Velocity
import com.astralplayer.nextplayer.data.*
import org.junit.Assert.*
import org.junit.Before
import org.junit.Test
import org.mockito.kotlin.*

/**
 * Unit tests for gesture detection
 */
class GestureDetectionTest {
    
    private lateinit var gestureManager: EnhancedGestureManager
    private lateinit var conflictResolver: GestureConflictResolver
    
    @Before
    fun setup() {
        gestureManager = EnhancedGestureManager()
        conflictResolver = GestureConflictResolver()
    }
    
    @Test
    fun `detect horizontal seek gesture`() {
        val handler = HorizontalSeekGestureHandler(
            screenWidth = 1080f,
            settings = SeekingGestureSettings(
                isEnabled = true,
                sensitivity = 1.0f,
                minimumSwipeDistance = 20f
            )
        )
        
        // Test right swipe
        val rightSeek = handler.processDrag(
            dragAmount = 100f,
            currentTime = System.currentTimeMillis(),
            currentPosition = Offset(540f, 500f)
        )
        
        assertNotNull(rightSeek)
        assertTrue(rightSeek!!.deltaMs > 0)
        
        // Test left swipe
        val leftSeek = handler.processDrag(
            dragAmount = -100f,
            currentTime = System.currentTimeMillis(),
            currentPosition = Offset(540f, 500f)
        )
        
        assertNotNull(leftSeek)
        assertTrue(leftSeek!!.deltaMs < 0)
    }
    
    @Test
    fun `detect double tap with side detection`() {
        val handler = DoubleTapHandler(
            settings = DoubleTapGestureSettings(
                isEnabled = true,
                seekAmount = 10000L,
                tapTimeout = 300L,
                maxTapDistance = 50f
            ),
            screenWidth = 1080f,
            onSeek = { amount, side ->
                assertEquals(10000L, Math.abs(amount))
                assertTrue(side == TouchSide.LEFT || side == TouchSide.RIGHT)
            }
        )
        
        // First tap
        val firstTapHandled = handler.processTap(Offset(100f, 500f))
        assertFalse(firstTapHandled) // First tap shouldn't trigger action
        
        // Second tap within timeout
        Thread.sleep(100)
        val secondTapHandled = handler.processTap(Offset(110f, 510f))
        assertTrue(secondTapHandled) // Double tap should trigger
    }
    
    @Test
    fun `long press speed progression`() {
        var currentSpeed = 1f
        var speedUpdateCount = 0
        
        val handler = LongPressSeekHandler(
            settings = LongPressGestureSettings(
                isEnabled = true,
                triggerDuration = 300L,
                speedProgression = listOf(1f, 2f, 4f, 8f),
                speedAccelerationInterval = 100L,
                maxSpeed = 8f,
                enableDirectionChange = true,
                directionChangeThreshold = 30f
            ),
            screenWidth = 1080f,
            onSpeedUpdate = { speed, direction ->
                currentSpeed = speed
                speedUpdateCount++
            },
            onSeekUpdate = { },
            onEnd = { }
        )
        
        // Start long press
        handler.start(Offset(900f, 500f)) // Right side = forward
        
        // Check initial speed
        assertEquals(1f, currentSpeed, 0.01f)
        
        // Verify it's active
        val info = handler.getSeekInfo()
        assertTrue(info.isActive)
        assertEquals(SeekDirection.FORWARD, info.direction)
        
        // Stop
        handler.stop()
        assertFalse(handler.getSeekInfo().isActive)
    }
    
    @Test
    fun `gesture conflict resolution`() {
        val settings = EnhancedGestureSettings()
        
        val gesture1 = DetectedGesture(
            type = GestureType.HORIZONTAL_SEEK,
            startPosition = Offset.Zero,
            currentPosition = Offset(100f, 0f),
            startTime = System.currentTimeMillis(),
            confidence = 0.8f
        )
        
        val gesture2 = DetectedGesture(
            type = GestureType.LONG_PRESS,
            startPosition = Offset.Zero,
            currentPosition = Offset.Zero,
            startTime = System.currentTimeMillis() - 500,
            confidence = 0.9f
        )
        
        val resolution = conflictResolver.resolveConflicts(
            listOf(gesture1, gesture2),
            settings
        )
        
        assertTrue(resolution is GestureResolution.Execute)
        assertEquals(GestureType.LONG_PRESS, (resolution as GestureResolution.Execute).gesture.type)
    }
    
    @Test
    fun `touch side detection`() {
        val manager = EnhancedGestureManager()
        
        assertEquals(TouchSide.LEFT, manager.getTouchSide(Offset(100f, 500f), 1080f))
        assertEquals(TouchSide.RIGHT, manager.getTouchSide(Offset(980f, 500f), 1080f))
        assertEquals(TouchSide.CENTER, manager.getTouchSide(Offset(540f, 500f), 1080f))
    }
    
    @Test
    fun `dead zone detection`() {
        val manager = EnhancedGestureManager()
        manager.updateEnhancedSettings(
            EnhancedGestureSettings(
                general = GeneralGestureSettings(gestureDeadZone = 50f)
            )
        )
        
        assertTrue(manager.isInDeadZone(Offset(25f, 500f), 1080f, 1920f))
        assertTrue(manager.isInDeadZone(Offset(1060f, 500f), 1080f, 1920f))
        assertTrue(manager.isInDeadZone(Offset(500f, 25f), 1080f, 1920f))
        assertFalse(manager.isInDeadZone(Offset(500f, 500f), 1080f, 1920f))
    }
    
    @Test
    fun `seek preview info calculation`() {
        val handler = HorizontalSeekGestureHandler(
            screenWidth = 1080f,
            settings = SeekingGestureSettings(
                showPreviewThumbnails = true,
                showTimeIndicator = true
            )
        )
        
        // Simulate some seeking
        handler.processDrag(100f, System.currentTimeMillis(), Offset(540f, 500f))
        
        val previewInfo = handler.getSeekPreviewInfo(
            currentPosition = 60000L, // 1 minute
            videoDuration = 3600000L  // 1 hour
        )
        
        assertTrue(previewInfo.showThumbnail)
        assertTrue(previewInfo.showTimeIndicator)
        assertTrue(previewInfo.isDragging)
        assertTrue(previewInfo.seekPosition >= 60000L)
    }
}