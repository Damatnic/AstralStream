name: Android CI/CD

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main ]

env:
  GRADLE_OPTS: "-Dorg.gradle.jvmargs=-Xmx4g -Dorg.gradle.daemon=false -Dkotlin.incremental=false"

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
      
    - name: Create local.properties
      run: |
        cd android
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        echo "GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" >> local.properties
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> local.properties
        echo "AZURE_SPEECH_API_KEY=${{ secrets.AZURE_SPEECH_API_KEY }}" >> local.properties
        echo "ASSEMBLY_AI_API_KEY=${{ secrets.ASSEMBLY_AI_API_KEY }}" >> local.properties
        echo "DEEPGRAM_API_KEY=${{ secrets.DEEPGRAM_API_KEY }}" >> local.properties
        
    - name: Run unit tests
      run: |
        cd android
        ./gradlew test --stacktrace
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: android/app/build/reports/tests/
        
  code-coverage:
    name: Generate Code Coverage
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
      
    - name: Create local.properties
      run: |
        cd android
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        
    - name: Run tests with coverage
      run: |
        cd android
        ./gradlew jacocoTestReport
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./android/app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        
    - name: Check coverage threshold
      run: |
        cd android
        ./gradlew jacocoTestCoverageVerification
        
  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
      
    - name: Create local.properties
      run: |
        cd android
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        
    - name: Run Android Lint
      run: |
        cd android
        ./gradlew lint
        
    - name: Upload lint results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: lint-results
        path: android/app/build/reports/lint-results-debug.html
        
  build:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
      
    - name: Create local.properties and keystore
      run: |
        cd android
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        echo "GOOGLE_AI_API_KEY=${{ secrets.GOOGLE_AI_API_KEY }}" >> local.properties
        echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" >> local.properties
        
    - name: Build debug APK
      run: |
        cd android
        ./gradlew assembleDebug
        
    - name: Upload APK
      uses: actions/upload-artifact@v4
      with:
        name: app-debug
        path: android/app/build/outputs/apk/debug/app-debug.apk
        
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run MobSF security scan
      uses: fundacaocerti/mobsf-action@v1.7.1
      with:
        INPUT_FILE_NAME: android/app/build/outputs/apk/debug/app-debug.apk
        SCAN_TYPE: apk
        OUTPUT_FILE_NAME: security-scan-results
      continue-on-error: true
      
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Check APK size
      run: |
        cd android
        echo "Checking APK size..."
        APK_SIZE=$(stat -c%s "app/build/outputs/apk/debug/app-debug.apk")
        echo "APK size: $((APK_SIZE / 1024 / 1024)) MB"
        if [ $APK_SIZE -gt 104857600 ]; then
          echo "Warning: APK size exceeds 100MB"
          exit 1
        fi
        
  instrumentation-test:
    name: Instrumentation Tests
    runs-on: macOS-latest
    needs: build
    strategy:
      matrix:
        api-level: [29, 33]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: gradle
        
    - name: Grant execute permission for gradlew
      run: chmod +x ./android/gradlew
      
    - name: Create local.properties
      run: |
        cd android
        echo "sdk.dir=$ANDROID_SDK_ROOT" > local.properties
        
    - name: AVD cache
      uses: actions/cache@v4
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}
        
    - name: Create AVD and generate snapshot for caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."
        
    - name: Run instrumentation tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          cd android
          ./gradlew connectedAndroidTest