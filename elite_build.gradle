plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-parcelize'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.9.24'
    id 'kotlin-kapt'
    id 'dagger.hilt.android.plugin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    namespace = 'com.astralplayer'
    compileSdk = 34

    defaultConfig {
        applicationId = "com.astralplayer"
        minSdk = 21  // Lower for wider compatibility
        targetSdk = 34
        versionCode = 1
        versionName = "1.0.0-elite"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary = true
        }
        
        // Enable multidex for comprehensive codec support
        multiDexEnabled = true
        
        // Optimize for video playback performance
        ndk {
            abiFilters 'arm64-v8a', 'armeabi-v7a', 'x86', 'x86_64'
        }
        
        // Enable hardware acceleration
        renderscriptTargetApi = 23
        renderscriptSupportModeEnabled = true
        
        // AI Service API Keys
        buildConfigField "String", "GOOGLE_AI_API_KEY", "\"${project.findProperty("GOOGLE_AI_API_KEY") ?: ""}\""
        buildConfigField "String", "SPEECH_TO_TEXT_API_KEY", "\"${project.findProperty("SPEECH_TO_TEXT_API_KEY") ?: ""}\""
        buildConfigField "String", "TRANSLATE_API_KEY", "\"${project.findProperty("TRANSLATE_API_KEY") ?: ""}\""
        buildConfigField "String", "OPENAI_API_KEY", "\"${project.findProperty("OPENAI_API_KEY") ?: ""}\""
        
        // Video player optimizations
        buildConfigField "boolean", "ENABLE_HARDWARE_ACCELERATION", "true"
        buildConfigField "boolean", "ENABLE_HDR_SUPPORT", "true"
        buildConfigField "boolean", "ENABLE_4K_SUPPORT", "true"
        buildConfigField "int", "MAX_BUFFER_SIZE_MB", "256"
        buildConfigField "int", "MIN_BUFFER_SIZE_MB", "32"
    }

    buildTypes {
        release {
            minifyEnabled = true
            shrinkResources = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            
            // Elite optimization flags
            zipAlignEnabled = true
            debuggable = false
            jniDebuggable = false
            
            // Performance optimizations
            manifestPlaceholders = [
                enablePerfettoDebug: "false",
                enableNetworkSecurityConfig: "true"
            ]
        }
        debug {
            minifyEnabled = false
            applicationIdSuffix = ".debug"
            versionNameSuffix = "-debug"
            debuggable = true
            
            manifestPlaceholders = [
                enablePerfettoDebug: "true",
                enableNetworkSecurityConfig: "true"
            ]
        }
        
        // Elite performance profile
        create("performance") {
            initWith(release)
            applicationIdSuffix = ".performance"
            versionNameSuffix = "-performance"
            
            // Maximum performance optimizations
            buildConfigField "int", "MAX_BUFFER_SIZE_MB", "512"
            buildConfigField "boolean", "ENABLE_ADVANCED_CODECS", "true"
        }
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
        coreLibraryDesugaringEnabled = true
    }
    
    kotlinOptions {
        jvmTarget = '17'
        freeCompilerArgs += [
            '-opt-in=kotlin.RequiresOptIn',
            '-opt-in=kotlinx.coroutines.ExperimentalCoroutinesApi',
            '-opt-in=androidx.compose.material3.ExperimentalMaterial3Api',
            '-opt-in=androidx.compose.animation.ExperimentalAnimationApi',
            '-opt-in=androidx.compose.foundation.ExperimentalFoundationApi',
            '-opt-in=androidx.media3.common.util.UnstableApi'
        ]
    }
    
    kapt {
        correctErrorTypes = true
        useBuildCache = true
        
        arguments {
            arg("room.schemaLocation", "$projectDir/schemas")
            arg("room.incremental", "true")
            arg("room.expandProjection", "true")
        }
    }
    
    buildFeatures {
        compose = true
        buildConfig = true
        viewBinding = true
    }
    
    composeOptions {
        kotlinCompilerExtensionVersion = '1.5.14'  // Compatible with Kotlin 1.9.24
    }
    
    // Elite packaging optimizations
    packagingOptions {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
            excludes += '/META-INF/DEPENDENCIES'
            excludes += '/META-INF/LICENSE'
            excludes += '/META-INF/LICENSE.txt'
            excludes += '/META-INF/license.txt'
            excludes += '/META-INF/NOTICE'
            excludes += '/META-INF/NOTICE.txt'
            excludes += '/META-INF/notice.txt'
            excludes += '/META-INF/ASL2.0'
            excludes += '/META-INF/*.kotlin_module'
            excludes += '/META-INF/gradle/incremental.annotation.processors'
        }
        jniLibs {
            useLegacyPackaging = true  // For ExoPlayer extensions
        }
    }
    
    lint {
        baseline = file("lint-baseline.xml")
        abortOnError = false
        checkReleaseBuilds = false
        disable 'MissingTranslation'
    }
    
    // Configure test options
    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
        unitTests.returnDefaultValues = true
    }
    
    // Enhanced build optimizations for video
    bundle {
        language {
            enableSplit = false  // Keep all languages for international content
        }
        density {
            enableSplit = true
        }
        abi {
            enableSplit = true
        }
    }
}

dependencies {
    // Core Android - Latest stable versions
    implementation 'androidx.core:core-ktx:1.12.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.7.0'
    implementation 'androidx.activity:activity-compose:1.8.2'
    
    // Desugaring for API compatibility
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:2.0.4'
    
    // Logging
    implementation 'com.jakewharton.timber:timber:5.0.1'
    
    // Splash Screen API
    implementation 'androidx.core:core-splashscreen:1.0.1'
    
    // Compose - Latest stable BOM
    implementation platform('androidx.compose:compose-bom:2024.02.00')
    implementation 'androidx.compose.ui:ui'
    implementation 'androidx.compose.ui:ui-graphics'
    implementation 'androidx.compose.ui:ui-tooling-preview'
    implementation 'androidx.compose.material3:material3'
    implementation 'androidx.compose.material:material-icons-extended'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-compose:2.7.0'
    
    // Material Design
    implementation 'com.google.android.material:material:1.11.0'
    
    // Enhanced Media3/ExoPlayer - Complete codec support
    def media3_version = "1.3.0"  // Latest stable
    
    // Core components
    implementation "androidx.media3:media3-common:${media3_version}"
    implementation "androidx.media3:media3-exoplayer:${media3_version}"
    implementation "androidx.media3:media3-ui:${media3_version}"
    implementation "androidx.media3:media3-datasource:${media3_version}"
    
    // CRITICAL: All streaming format support
    implementation "androidx.media3:media3-exoplayer-hls:${media3_version}"
    implementation "androidx.media3:media3-exoplayer-dash:${media3_version}"
    implementation "androidx.media3:media3-exoplayer-smoothstreaming:${media3_version}"
    implementation "androidx.media3:media3-exoplayer-rtsp:${media3_version}"
    
    // Network components for streaming
    implementation "androidx.media3:media3-datasource-okhttp:${media3_version}"
    implementation "androidx.media3:media3-datasource-cronet:${media3_version}"
    
    // Additional codecs and containers
    implementation "androidx.media3:media3-extractor:${media3_version}"
    implementation "androidx.media3:media3-decoder:${media3_version}"
    
    // Cast support
    implementation "androidx.media3:media3-cast:${media3_version}"
    
    // Session for background playback
    implementation "androidx.media3:media3-session:${media3_version}"
    
    // Coroutines
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.8.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.0'
    
    // Serialization
    implementation 'org.jetbrains.kotlinx:kotlinx-serialization-json:1.6.3'
    
    // Enhanced networking for adult content sites
    implementation 'com.squareup.okhttp3:okhttp:4.12.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:4.12.0'
    implementation 'com.squareup.okhttp3:okhttp-urlconnection:4.12.0'
    implementation 'com.squareup.retrofit2:retrofit:2.9.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.9.0'
    
    // Security
    implementation "androidx.security:security-crypto:1.1.0-alpha06"
    implementation "androidx.biometric:biometric:1.1.0"
    
    // Room database
    def room_version = "2.6.1"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    
    // DataStore
    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.datastore:datastore:1.0.0"

    // Hilt dependency injection
    implementation "com.google.dagger:hilt-android:2.48"
    kapt "com.google.dagger:hilt-compiler:2.48"
    implementation "androidx.hilt:hilt-navigation-compose:1.1.0"
    implementation 'androidx.hilt:hilt-work:1.1.0'
    kapt 'androidx.hilt:hilt-compiler:1.1.0'
    
    // WorkManager
    def work_version = "2.9.0"
    implementation "androidx.work:work-runtime-ktx:$work_version"
    
    // JSON processing
    implementation 'com.google.code.gson:gson:2.10.1'
    
    // UI utilities
    implementation 'org.burnoutcrew.composereorderable:reorderable:0.9.6'
    implementation 'io.coil-kt:coil-compose:2.6.0'
    
    // Firebase - Elite analytics
    implementation platform('com.google.firebase:firebase-bom:32.7.4')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-perf-ktx'
    
    // Google AI for subtitles
    implementation 'com.google.ai.client.generativeai:generativeai:0.2.2'
    
    // ML Kit for enhanced features
    implementation 'com.google.mlkit:language-id:17.0.4'
    implementation 'com.google.mlkit:translate:17.0.2'
    implementation 'com.google.mlkit:text-recognition:16.0.0'
    
    // TensorFlow Lite for AI processing
    implementation 'org.tensorflow:tensorflow-lite:2.14.0'
    implementation 'org.tensorflow:tensorflow-lite-gpu:2.14.0'
    implementation 'org.tensorflow:tensorflow-lite-task-audio:0.4.4'
    implementation 'org.tensorflow:tensorflow-lite-support:0.4.4'
    
    // Google Cast SDK
    implementation 'com.google.android.gms:play-services-cast:21.5.0'
    implementation 'com.google.android.gms:play-services-cast-framework:21.5.0'
    
    // Testing - Comprehensive suite
    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.mockito:mockito-core:5.12.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito.kotlin:mockito-kotlin:5.3.1'
    testImplementation "io.mockk:mockk:1.13.8"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:1.8.0"
    testImplementation "androidx.room:room-testing:2.6.1"
    testImplementation 'androidx.test:core:1.5.0'
    testImplementation 'androidx.test.ext:junit:1.1.5'
    testImplementation 'org.robolectric:robolectric:4.11.1'
    testImplementation 'androidx.arch.core:core-testing:2.2.0'
    
    // Hilt testing
    testImplementation "com.google.dagger:hilt-android-testing:2.48"
    kaptTest "com.google.dagger:hilt-compiler:2.48"
    
    // Android testing
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'
    androidTestImplementation platform('androidx.compose:compose-bom:2024.02.00')
    androidTestImplementation 'androidx.compose.ui:ui-test-junit4'
    
    // Hilt instrumented testing
    androidTestImplementation "com.google.dagger:hilt-android-testing:2.48"
    kaptAndroidTest "com.google.dagger:hilt-compiler:2.48"
    
    // Debug tools
    debugImplementation 'androidx.compose.ui:ui-tooling'
    debugImplementation 'androidx.compose.ui:ui-test-manifest'
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.12'
}

// Elite configuration
kapt {
    correctErrorTypes = true
    useBuildCache = true
}

// Performance optimization tasks
tasks.register('optimizeForAdultContent') {
    group = 'optimization'
    description = 'Optimize build for adult content streaming'
    
    doLast {
        println "Applied adult content optimizations"
        // Custom optimization logic here
    }
}

tasks.register('validateCodecSupport') {
    group = 'validation'
    description = 'Validate codec support for target devices'
    
    doLast {
        println "Validating codec support..."
        // Codec validation logic here
    }
}

// Elite build verification
tasks.register('eliteVerification') {
    group = 'verification'
    description = 'Run comprehensive elite verification tests'
    dependsOn 'test', 'lint', 'validateCodecSupport'
    
    doLast {
        println "Elite AstralStream build verification complete"
    }
}